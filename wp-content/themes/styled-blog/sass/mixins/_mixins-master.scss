@import"media-queries";

// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 18) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

 
//Implementation of Theme Colors
 
@mixin styled_blog($themes) {
  @each $styled_blog, $map in $themes {
    .styled_blog--#{$styled_blog} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $styled_blog), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}

// Text Settings

@function text-scale($level){
	@return map-get(map-get($text-settings, $level), 'font-size');
}

@function line-height($level){
	@return map-get(map-get($text-settings, $level), line-height);
}

@mixin text-setting($level){
	font-size:		text-scale($level);
	line-height:	line-height($level);
}
 

// border-setting
@mixin border($direction, $width, $style, $color) {
  border-#{$direction}: $width $style $color;
}


//link Style

@mixin links($links, $visit, $hover, $active){
	a{
		color:$links;

		&:visited{
			color:$links;
		}

		&:hover{
			color:$hover;
		}

		&:active,&--active{
			color:$active;
		}
	}
}

//border radius
@mixin border-radius($border-radius) {
	-moz-border-radius: $border-radius;
	-o-border-radius: $border-radius;
	-ms-border-radius: $border-radius;
	-webkit-border-radius: $border-radius;
    border-radius: $border-radius;
}
// generic transform
@mixin transform($transforms) {
	-moz-transform: $transforms;
	-o-transform: $transforms;
	-ms-transform: $transforms;
	-webkit-transform: $transforms;
    transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
	@include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
	-o-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
   	transform-origin: $origin;
}




// generic transition
@mixin transition ($transition...){
	-moz-transition: $transition;
	-o-transition: $transition;
	-ms-transition: $transition;
	-webkit-transition: $transition;
    transition: $transition;
}

@mixin transition-delay($delay...) {
    -moz-transition-delay:    $delay;
    -o-transition-delay:      $delay;
    -webkit-transition-delay: $delay;
    transition-delay:         $delay;
}

// generic animation
@mixin animation ($animation...){
	-moz-animation: $animation;
	-o-animation: $animation;
	-ms-animation: $animation;
	-webkit-animation: $animation;
    animation: $animation;
}

@mixin animation-delay($delay...) {
    -moz-animation-delay:    $delay;
    -o-animation-delay:      $delay;
    -webkit-animation-delay: $delay;
    animation-delay:         $delay;
}


 @mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}

 